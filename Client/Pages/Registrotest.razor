@page "/Registrotest"
@page "/Registrotest/{EntradaId:int}"
@inject HttpClient httpClient
@inject NotificationService notify
@using Radzen

<EditForm Model="EntradaId" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <fieldset>
        <div class="card">
            <div class="card-header">
                <h1>Entradas de productos empacados</h1>
            </div>

            <div class="card-body">
                @*Buscar*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>EntradaId</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="entradas.EntradaId" class="form-control" aria-describedby="buscarButton" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>
                    </div>
                </div>

                @*Fecha*@
                <div class="col-4">
                    <label class="form-laber">Fecha</label>
                    <InputDate @bind-Value="entradas.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => entradas.Fecha)" />
                </div>

                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label">Concepto</label>
                    <InputText @bind-Value="entradas.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => entradas.Concepto)" />
                </div>

                <hr>

                @*Utilizados*@
                <fieldset class="border-success border border-1">
                    <div class="card-header">
                        <h3>Utilizados</h3>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label>Producto: </label>
                            <InputSelect @bind-Value="entradasDetalle.ProductoId" class="form-select">
                                <option value="@entradas.ProductoId" hidden="hidden">[Seleccione]</option>
                             @foreach (var tipo in ProductosList.Where(o=>o.PresentacionId == 1))
								{
									<option value="@tipo.ProductoId"> "@tipo.Descripcion" </option>
								}
                            </InputSelect>
                            <ValidationMessage For="@(() => entradasDetalle.ProductoId)" />
                        </div>

                        <div class="col-md-5">
                            <label>Cantidad</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="entradasDetalle.CantidadUtilizada" class="form-control"></InputNumber>
                                <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                                <ValidationMessage For="@(() => entradasDetalle.CantidadUtilizada)" />
                            </div>
                        </div>
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>ProductoID</th>
                                <th>Descripcion</th>
                                <th>Cantidad</th>
                            </tr>
                        </thead>

                        <tbody>

                            @foreach (var item in this.entradas.EntradasDetalles)
                            {
                                <tr>
                                    <td>@item.ProductoId</td>
                                    <td>@ObtenerDescripcion(item.ProductoId)</td>
                                    <td>@item.CantidadUtilizada</td>
                                    <td><button type="button" class="btn btn-outline-danger" @onclick=@(() => EliminarDetalle(item))><i class="oi oi-trash" /></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @*Total*@
                    <div class="row justify-content-between">
                        <div class="col-2">
                            <label>Total:</label>
                            <input disabled @bind-value="Total" class="form-control" />
                        </div>
                    </div>

                    <hr>
                </fieldset>

                <hr>

                @*Producido*@
                <fieldset class="border-success border border-1">
                    <legend>Producido</legend>
                    <div class="row">
                        <div class="col-3">
                            <select @bind="entradas.ProductoId" class="form-control">
                                @foreach (var item in ProductosList)
                                {
                                    <option value="@item.ProductoId">@item.Descripcion</option>
                                }
                            </select>
                        </div>

                        <div class="col-2">
                            <input disabled @bind-value="entradas.CantidadProducida" class="form-control" placeholder="Cantidad Producida" />
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Vaciar">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </fieldset>
</EditForm>

@code
{
    [Parameter]
    public int EntradaId { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public Productos productos { get; set; } = new Productos();
    public EntradasDetalles entradasDetalle { get; set; } = new EntradasDetalles();
    public int Total { get; set; } = 0;
    public int Cantidad { get; set; }
    public List<Productos> ProductosList { get; set; } = new List<Productos>();

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (productos is not null)
        {
            ProductosList = productos;
        }

        if(EntradaId > 0)
        {
            this.entradas.EntradaId = EntradaId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        Total = 0;
    }

    public void Limpiar()
    {
        this.entradas = new Entradas();
        Total = 0;
        notify.ShowNotification(titulo: "Nuevo", mensaje: "Se ha limpiado correctamente", NotificationSeverity.Info);
    }

    public async Task<bool> Buscar()
    {
        try
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}");

            if (entradaEncontrada != null)
            {
                int Suma = 0;
                this.entradas = entradaEncontrada;
                this.entradas.EntradasDetalles = entradaEncontrada.EntradasDetalles.ToList();

                foreach (var item in entradas.EntradasDetalles)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }

                StateHasChanged();
                notify.ShowNotification(titulo: "Encontrado", mensaje: "Entrada encontrada",
                NotificationSeverity.Info);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            notify.ShowNotification(titulo: "No encontrado", mensaje: "Entrada no existente", NotificationSeverity.Warning);
            return false;
        }
    }

    private async Task<Productos> BuscarEntradas(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if (producto == null)
        {
            return new Productos();
        }

        return producto;
    }

    public void Vaciar()
    {
        this.entradas = new Entradas();
        Total = 0;
      
    }

    public bool Validar()
    {
        if (string.IsNullOrEmpty(entradas.Concepto))
        {
            return false;
        }
        if (entradas.ProductoId < 0)
        {
            return false;
        }
        if (entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if (entradasDetalle.ProductoId < 0)
        {
            return false;
        }
        if (entradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        entradas.EntradasDetalles = this.entradas.EntradasDetalles.ToList();
        using var response = await httpClient.PostAsJsonAsync("api/Entradas", entradas);

        if (Validar())
        {
            if (response.IsSuccessStatusCode)
            {
                var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

                if (entradaDevuelta is not null)
                {
                    this.entradas = entradaDevuelta;
                    Nuevo();
                    notify.ShowNotification(titulo: "Guardado", mensaje: "Se ha guardado correctamente",
                    NotificationSeverity.Success);
                }
                else
                {
                    notify.ShowNotification(titulo: "No Guardado", mensaje: "No guardado", NotificationSeverity.Error);
                }
            }
            else
            {
                notify.ShowNotification(titulo: "Error", mensaje: "¡ERROR! , Intente nuevamente",
                NotificationSeverity.Error);
            }
        }
    }
    
    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaId}");

        if (Validar())
        {
            if (!response.IsSuccessStatusCode)
            {

                notify.ShowNotification(titulo: "No eliminado", mensaje: "No eliminado", NotificationSeverity.Warning);
                return;
            }
            else
            {
                Nuevo();
                notify.ShowNotification(titulo: "Eliminado", mensaje: "Se ha eliminado correctamente",
                NotificationSeverity.Error);
            }
        }
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            if (entradasDetalle.CantidadUtilizada <= 0)
            {
                notify.ShowNotification(titulo: "Error", mensaje: "La cantidad debe ser mayor que cero",
                NotificationSeverity.Warning);
                return;
            }

            var producto = await BuscarEntradas(entradasDetalle.ProductoId);

            if (entradas != null)
            {
                int Suma = 0;
                int Temp = 0;
                int CajaMin = 0;

                if (entradasDetalle.CantidadUtilizada > producto.Existencia)
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "La cantidad es mayor que la existencia del producto",
                    NotificationSeverity.Warning);
                    return;
                }

                entradasDetalle.EntradaId = entradas.EntradaId;
                entradas.EntradasDetalles.Add(entradasDetalle);
                entradasDetalle = new EntradasDetalles();

                foreach (var item in entradas.EntradasDetalles)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }
             
                entradas.CantidadProducida = Total / 3;
            }
        }
    }

    public void EliminarDetalle(EntradasDetalles detalle)
    {
        this.entradas.EntradasDetalles.Remove(detalle);

        Total = this.entradas.EntradasDetalles.Sum(t => t.CantidadUtilizada);
        entradas.CantidadProducida = Total * 2;
    }

    public string ObtenerDescripcion(int Id)
    {
        return ProductosList.Where(p => p.ProductoId == Id).FirstOrDefault().Descripcion;
    }
}