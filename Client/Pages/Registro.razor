@page "/Registro"
@page "/Registro/{EntradaId:int}"
@inject HttpClient httpClient
@inject NotificationService notify
@using Radzen

<EditForm Model="EntradaId" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h3>Registro de Entradas</h3>
			</div>
			<div class="card-body">
				@*Buscar*@
				<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
					<label>EntradaId</label>
					<div class="input-group mb-3">
						<InputNumber @bind-Value="Entradas.EntradaId" class="form-control" aria-describedby="buscarButton" />
						<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
							<i class="oi oi-magnifying-glass" />
						</button>
					</div>
				</div>

				@*Fecha*@
				<div class="col-4">
					<label class="form-laber">Fecha</label>
					<InputDate @bind-Value="Entradas.Fecha" class="form-control"></InputDate>
					<ValidationMessage For="@(() => Entradas.Fecha)" />
				</div>

				@*Concepto*@
				<div class="mb-3">
					<label class="form-label">Concepto</label>
					<InputText @bind-Value="Entradas.Concepto" class="form-control"></InputText>
					<ValidationMessage For="@(() => Entradas.Concepto)" />
				</div>

				@*DETALLE*@
				<fieldset class="border-success border border-1">
					<div class="card-header">
						<h3>Utilizados</h3>
					</div>
					<div class="row m-1">
						
						@*Productos*@
						<div class="col-8">
							<label>Tipo de frutos para crear un producto :</label>
							<InputSelect class="form-select" @bind-Value="Detalle.ProductoId">
								<option value="0" disabled selected> [Seleccione] </option>
								@foreach (var tipo in Productos.Where(o=>o.PresentacionId == 1))
								{
									<option value="@tipo.ProductoId"> "@tipo.Descripcion" </option>
								}
							</InputSelect>
						</div>

						@*CantidadUtilizada*@
						<div class="col-2">
							<label>CantidadUtilizada:</label>
							<InputNumber class="form-control" @bind-Value="Detalle.CantidadUtilizada"></InputNumber>
						</div>

						@*Boton Agregar*@
						<div class="col-2">
							<br>
							<button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
								<span class="oi oi-plus">Agregar</span>
							</button>
						</div>
						@if (ValidacionDetalle.Length > 0)
						{
							<label class="text-danger">@ValidacionDetalle</label>
						}
					</div>

					@*Tabla de detalles*@
					<hr />
					<table class="table table-bordered table-light m-1">
						<thead class="thead">
							<tr class="table">
								<th>Entradas</th>
								<th>Descripci&oacuten</th>
								<th>CantidadUtilizada</th>
							</tr>
						</thead>

						<tbody>
							@foreach (var detalle in Entradas.EntradasDetalles )
							{
								<tr>
									<td>@detalle.ProductoId</td>
									<td>@detalle.CantidadUtilizada</td>
									<td> <button @onclick="@(() => RemoverDetalle(detalle))"><i class="oi oi-trash" /> Eliminar</button>   </td>
								</tr>
							}
						</tbody>

						<div class="row justify-content-between">
							<div class="col-8">
								<label>Peso Total</label>
								<div class="input-group mb-3">
									<input disabled @bind-value="Total" class="form-control" />
								</div>
							</div>
						</div>
					</table>
					<hr />
				</fieldset>

				<hr />

				<fieldset class="border-success border border-1">
					<div class="card-header">
						<h3>Producido</h3>
					</div>
						<div class="row m-1">
							@*Productos*@
						<div class="col-8">
							<label>Producto Producido :</label>
							<InputSelect class="form-select" @bind-Value=@Producido.ProductoId>
								<option value="0" disabled selected> [Seleccione] </option>
								@foreach (var tipo in Productos.Where(o=>o.PresentacionId == 2))
								{
									<option value="@tipo.ProductoId"> "@tipo.Descripcion" </option>
								}
							</InputSelect>
						</div>

						@*CantidadUtilizada*@
						<div class="col-2">
							<label>CantidadUtilizada:</label>
							<InputNumber class="form-control" @bind-Value="Detalle.CantidadUtilizada"></InputNumber>
						</div>
					</div>
				</fieldset>
			</div>

			<div class="card-footer d-flex justify-content-center">
				<div class="btn-group" role="group">
					<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
					<button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
					<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="io io-trash" /> Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	@if (Mensaje.Length > 0)
	{
		<label class="text-danger">@Mensaje</label>
	}
</EditForm>

@code {

	[Parameter]
	public int EntradaId {get ; set;}
	public int ProductoId {get; set;}
	public Entradas Entradas {get; set;} = new Entradas ();
	public IEnumerable<Productos> Productos {get; set;} = new List<Productos>();
	public Productos Producido {get; set;} = new Productos();
	public EntradasDetalles Detalle { get; set; } = new EntradasDetalles();
	public int Productoseleccionado { get; set; } = 0;
	public string NombreProducido { get; set; } = string.Empty;
	public int Entradaseleccionado { get; set; } = 0;
	public string Mensaje { get; set; } = string.Empty;
	public string ValidacionDetalle { get; set; } = string.Empty;
	public int Total { get; set; } = 0;


   protected override async Task OnInitializedAsync()
    {
		if (EntradaId > 0)
		{
			this.Entradas.EntradaId = EntradaId;
			await Buscar();
		}

		this.Productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

    }

    private async Task<Productos> BuscarEntradas(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if (producto == null)
        {
            return new Productos();
        }

        return producto;
    }
    public async Task<bool> Buscar()
    {
        try
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{Entradas.EntradaId}");

            if (entradaEncontrada != null)
            {
                int Suma = 0;
                this.Entradas = entradaEncontrada;
                this.Entradas.EntradasDetalles = entradaEncontrada.EntradasDetalles.ToList();

                foreach (var item in Entradas.EntradasDetalles)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }

                StateHasChanged();
                notify.ShowNotification(titulo: "Encontrado", mensaje: "Entrada encontrada",
                NotificationSeverity.Info);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            notify.ShowNotification(titulo: "No encontrado", mensaje: "Entrada no existente", NotificationSeverity.Warning);
            return false;
        }
    }

      public bool Validar()
    {
        if (string.IsNullOrEmpty(Entradas.Concepto))
        {
            return false;
        }
        if (Entradas.ProductoId < 0)
        {
            return false;
        }
        if (Entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }


	public bool ValidarDetalle()
    {	
		
        ValidacionDetalle = string.Empty;
        if (Detalle.CantidadUtilizada <= 0)
        {
			return false ;
           
        }
		if (Detalle.CantidadUtilizada < Producido.Existencia)
        {
			return false ;
           
        }
        if (String.IsNullOrWhiteSpace(NombreProducido))
        {
			return false;
        }
		else
		{
			 return true;
		}

    }
	
    public async Task Guardar()
    {
        Entradas.EntradasDetalles = this.Entradas.EntradasDetalles.ToList();
        using var response = await httpClient.PostAsJsonAsync("api/Entradas", Entradas);

        if (Validar())
        {
            if (response.IsSuccessStatusCode)
            {
                var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

                if (entradaDevuelta is not null)
                {
                    this.Entradas = entradaDevuelta;
                    Nuevo();
                    notify.ShowNotification(titulo: "Guardado", mensaje: "Se ha guardado correctamente",
                    NotificationSeverity.Success);
                }
                else
                {
                    notify.ShowNotification(titulo: "No Guardado", mensaje: "No guardado", NotificationSeverity.Error);
                }
            }
            else
            {
                notify.ShowNotification(titulo: "Error", mensaje: "Â¡ERROR! , Intente nuevamente",
                NotificationSeverity.Error);
            }
        }
    }

    public void Nuevo()
    {
        this.Entradas = new Entradas();
        Mensaje = string.Empty;
        ValidacionDetalle = string.Empty;
		Total = 0;
        NombreProducido = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entradas/{Entradas.EntradaId}");

        if (Validar())
        {
            if (!response.IsSuccessStatusCode)
            {

                notify.ShowNotification(titulo: "No eliminado", mensaje: "No eliminado", NotificationSeverity.Warning);
                return;
            }
            else
            {
                Nuevo();
                notify.ShowNotification(titulo: "Eliminado", mensaje: "Se ha eliminado correctamente",
                NotificationSeverity.Error);
            }
        }
    }

    public async Task EliminarDetalle()
    {
        using var response = await httpClient.DeleteAsync($"api/Entradas/{Entradas.EntradaId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        else
            Nuevo();
    }

    public void RemoverDetalle(EntradasDetalles detalleRemover)
	{
		Entradas.EntradasDetalles.Remove(detalleRemover);
	}

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            if (Detalle.CantidadUtilizada <= 0)
            {
                notify.ShowNotification(titulo: "Error", mensaje: "La cantidad debe ser mayor que cero",
                NotificationSeverity.Warning);
                return;
            }

            var producto = await BuscarEntradas(Detalle.ProductoId);

            if (Entradas != null)
            {
                int Suma = 0;

                if (Detalle.CantidadUtilizada < Producido.Existencia)
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "La cantidad es mayor que la existencia del producto",
                    NotificationSeverity.Warning);
                    return;
                }

                Detalle.EntradaId = Entradas.EntradaId;
                Entradas.EntradasDetalles.Add(Detalle);
                Detalle = new EntradasDetalles();

                foreach (var item in Entradas.EntradasDetalles)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }

                Entradas.CantidadProducida = Total * 2;
            }
        }
    }

    public string ObtenerDescripcion(int Id)
    {
        return Productos.Where(p => p.ProductoId == Id).FirstOrDefault().Descripcion;
    }


}